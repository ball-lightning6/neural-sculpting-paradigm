def verify_hanoi_solution(n: int, solution_str: str, source_peg: int = 1, dest_peg: int = 3) -> bool:
    """
    验证一个汉诺塔解法字符串是否正确。

    Args:
        n (int): 盘子的数量。
        solution_str (str): 'x>y;x>y;...' 格式的解法字符串。
        source_peg (int): 源柱子的编号 (默认为 1)。
        dest_peg (int): 目标柱子的编号 (默认为 3)。

    Returns:
        bool: 如果解法正确则返回 True，否则返回 False 并打印错误信息。
    """
    if n < 0:
        print("❌ 错误：盘子数量 (n) 不能为负数。")
        return False

    if n==0:
        if not solution_str.strip():
            print("✅ 正确! n=0 时，不需要任何移动。")
            return True
        else:
            print("❌ 错误: n=0 时，解法字符串应该为空。")
            return False

    # 1. 初始化状态
    pegs = {1: [], 2: [], 3: []}
    # 将 n 个盘子放到源柱子上，用数字大小代表盘子大小，大数字在下
    pegs[source_peg] = list(range(n, 0, -1))

    # 确定辅助柱子
    aux_peg = list({1, 2, 3} - {source_peg, dest_peg})[0]

    # 2. 解析移动指令
    # 清理字符串前后空白，并处理末尾可能有的分号
    moves = [move for move in solution_str.strip().split(';') if move]

    # 3. 逐一执行并验证移动
    for i, move in enumerate(moves):
        try:
            from_str, to_str = move.split('>')
            from_p, to_p = int(from_str), int(to_str)
            if from_p not in pegs or to_p not in pegs:
                raise ValueError("柱子编号必须是 1, 2, 或 3。")
        except ValueError as e:
            print(f"❌ 错误: 第 {i + 1} 步 '{move}' 格式无效。{e}")
            return False

        # 规则检查：源柱子不能为空
        if not pegs[from_p]:
            print(f"❌ 错误: 第 {i + 1} 步 '{move}' 失败。源柱子 {from_p} 是空的，无法移出盘子。")
            return False

        disk_to_move = pegs[from_p][-1]

        # 规则检查：大盘不能放小盘上
        if pegs[to_p] and disk_to_move > pegs[to_p][-1]:
            print(f"❌ 错误: 第 {i + 1} 步 '{move}' 失败。不能将大盘子 {disk_to_move} 放在小盘子 {pegs[to_p][-1]} 上。")
            return False

        # 执行移动
        pegs[to_p].append(pegs[from_p].pop())
        # print(f"第 {i+1} 步 '{move}': {pegs}") # 取消此行注释可以查看每一步的状态

    # 4. 验证最终状态
    # 期望的最终状态是所有盘子都在目标柱子上
    expected_final_state = list(range(n, 0, -1))

    if pegs[dest_peg]==expected_final_state:
        # 还要确保其他柱子是空的
        if not pegs[source_peg] and not pegs[aux_peg]:
            print(f"✅ 正确! 该解法成功将 {n} 个盘子从柱子 {source_peg} 移动到了 {dest_peg}。")
            return True
        else:
            print(f"❌ 错误: 目标柱子状态正确，但源柱子或辅助柱子不为空。")
            print(f"   最终状态: {pegs}")
            return False
    else:
        print(f"❌ 错误: 移动结束后，最终状态不正确。")
        print(f"   期望的目标柱子 {dest_peg} 状态: {expected_final_state}")
        print(f"   实际的最终状态: {pegs}")
        return False


# --- 主程序：测试 ---
if __name__=="__main__":
    print("--- 测试 n=3 的正确解 ---")
    n3_correct_solution = "1>3;1>2;3>2;1>3;2>1;2>3;1>3"
    verify_hanoi_solution(3, n3_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=6 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2"
    verify_hanoi_solution(6, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=6 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;"
    verify_hanoi_solution(6, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")


    print("--- 测试 n=8 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2"
    verify_hanoi_solution(8, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=8 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2"
    verify_hanoi_solution(8, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=7 的正确解 ---")
    n6_correct_solution = "1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;3>1;2>1;2>3;1>3;2>1;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2"
    verify_hanoi_solution(7, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=6 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3"
    verify_hanoi_solution(6, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=7 的正确解 ---")
    n6_correct_solution = "1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;2>3;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;2>3;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3"
    verify_hanoi_solution(7, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=6 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;1>2;3>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;1>2;3>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3"

    verify_hanoi_solution(6, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=5 的正确解 ---")
    n6_correct_solution = "1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;2>3;1>3;1>2;3>2;1>3;2>1;2>3;1>3"

    verify_hanoi_solution(5, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=6 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;3>2;2>1;1>3;1>2;3>2;1>3;2>1;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;3>2;2>1;1>3;1>2;3>2;1>3;2>1;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;3>2;1>3"

    verify_hanoi_solution(6, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=5 的正确解 ---")
    n6_correct_solution = "1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;2>1;3>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;2>1;2>3;1>3;2>1;2>3;1>3"

    verify_hanoi_solution(5, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=4 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;3>1;3>2;1>3"

    verify_hanoi_solution(4, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=6 deepseek 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;3>2;1>2;3>1;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3"

    verify_hanoi_solution(6, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=7 deepseek 的正确解 ---")
    n6_correct_solution = "1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;2>3;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;3>1;2>1;2>3;1>3;2>1;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;2>3;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;3>2;1>3;1>2;3>2;3>1;2>1;2>3;1>3;2>1;3>2;3>1;2>1;2>3;1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3"

    verify_hanoi_solution(7, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=4 doubao 1.6 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3"

    verify_hanoi_solution(4, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=6 doubao 1.6 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;2>1;3>1;2>3;1>2;1>3;2>3;1>2;3>1;3>2;1>2;3>1;2>3;2>1;3>1;3>2;1>2;1>3;2>3;1>2;3>1;3>2;1>2"

    verify_hanoi_solution(6, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=4 doubao 的正确解 ---")
    n6_correct_solution = "1>2;1>3;2>3;1>2;3>1;3>2;1>2;1>3;2>3;2>1;3>1;2>3;1>2;3>1;3>2;1>3"

    verify_hanoi_solution(4, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")

    print("--- 测试 n=5 doubao 1.6 的正确解 ---")
    n6_correct_solution = "1>3;1>2;3>2;1>3;2>1;2>3;1>3;1>2;3>2;3>1;2>1;3>2;1>3;1>2;3>2;1>3;2>1;2>3;1>3;2>1;3>2;3>1;2>1;2>3;1>3;1>2;3>2;1>3;2>1;2>3;1>3"

    verify_hanoi_solution(5, n6_correct_solution)
    print("\n" + "=" * 30 + "\n")



    # print("--- 测试一个 n=3 的错误解 (大盘放小盘) ---")
    # n3_wrong_solution_1 = "1>3;1>2;1>3"  # 尝试将盘子2放到盘子1上
    # verify_hanoi_solution(3, n3_wrong_solution_1)
    # print("\n" + "=" * 30 + "\n")
    #
    # print("--- 测试一个 n=3 的错误解 (未完成) ---")
    # n3_wrong_solution_2 = "1>3;1>2;3>2"
    # verify_hanoi_solution(3, n3_wrong_solution_2)
    # print("\n" + "=" * 30 + "\n")
    #
    # print("--- 测试一个 n=2 的错误解 (格式错误) ---")
    # n2_wrong_solution_3 = "1>2;1-3;2>3"
    # verify_hanoi_solution(2, n2_wrong_solution_3)